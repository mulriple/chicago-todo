// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.todoApp = {
    Models: {},
    Collections: {},
    Views: {}
  };

  todoApp.Models.Todo = (function(_super) {

    __extends(Todo, _super);

    function Todo() {
      return Todo.__super__.constructor.apply(this, arguments);
    }

    Todo.prototype.urlRoot = '/todos/index';

    Todo.prototype.defaults = {
      title: "empty",
      done: false
    };

    Todo.prototype.initialize = function() {
      if (!this.get("order")) {
        return this.set({
          "order": todoApp.todos.nextOrder()
        });
      }
    };

    Todo.prototype.toggle = function() {
      return this.save({
        done: !this.get("done")
      });
    };

    return Todo;

  })(Backbone.Model);

  todoApp.Collections.TodoList = (function(_super) {

    __extends(TodoList, _super);

    function TodoList() {
      return TodoList.__super__.constructor.apply(this, arguments);
    }

    TodoList.prototype.url = '/todos/index';

    TodoList.prototype.model = todoApp.Models.Todo;

    TodoList.prototype.done = function() {
      return this.filter(function(todo) {
        return todo.get("done");
      });
    };

    TodoList.prototype.remaining = function() {
      return this.without.apply(this, this.done());
    };

    TodoList.prototype.nextOrder = function() {
      if (!this.length) {
        return 1;
      }
      return this.last().get("order") + 1;
    };

    TodoList.prototype.comparator = function(todo) {
      return this.get("order");
    };

    return TodoList;

  })(Backbone.Collection);

  todoApp.Views.TodoView = (function(_super) {

    __extends(TodoView, _super);

    function TodoView() {
      return TodoView.__super__.constructor.apply(this, arguments);
    }

    TodoView.prototype.tagName = "li";

    TodoView.prototype.template = _.template($('#item-template').html());

    TodoView.prototype.events = {
      "click .toggle": "toggleDone",
      "dblclick .view": "edit",
      "click a.destroy": "clear",
      "keypress .edit": "updateOnEnter",
      "blur .edit": "close"
    };

    TodoView.prototype.initialize = function() {
      this.listenTo(this.model, 'change', this.render);
      return this.listenTo(this.model, 'destroy', this.remove);
    };

    TodoView.prototype.render = function() {
      this.$el.html(this.template(this.model.toJSON()));
      this.$el.toggleClass('done', this.model.get('done'));
      this.input = this.$('.edit');
      return this;
    };

    TodoView.prototype.toggleDone = function() {
      return this.model.toggle();
    };

    TodoView.prototype.edit = function() {
      this.$el.addClass("editing");
      return this.input.focus();
    };

    TodoView.prototype.close = function() {
      var value;
      value = this.input.val();
      if (!value) {
        return this.clear();
      } else {
        this.model.save({
          title: value
        });
        return this.$el.removeClass("editing");
      }
    };

    TodoView.prototype.clear = function() {
      return this.model.destroy();
    };

    TodoView.prototype.updateOnEnter = function(event) {
      if (event.keyCode === 13) {
        return this.close();
      }
    };

    return TodoView;

  })(Backbone.View);

  todoApp.Views.AppView = (function(_super) {

    __extends(AppView, _super);

    function AppView() {
      return AppView.__super__.constructor.apply(this, arguments);
    }

    AppView.prototype.el = $("#todoapp");

    AppView.prototype.statsTemplate = _.template($("#stats-template").html());

    AppView.prototype.events = {
      "keypress #new-todo": "createOnEnter",
      "click #clear-completed": "clearCompleted",
      "click #toggle-all": "toggleAllComplete"
    };

    AppView.prototype.initialize = function() {
      this.input = this.$("#new-todo");
      this.allCheckbox = this.$("#toggle-all")[0];
      this.listenTo(todoApp.todos, 'add', this.addOne);
      this.listenTo(todoApp.todos, 'reset', this.addAll);
      this.listenTo(todoApp.todos, 'all', this.render);
      this.footer = this.$('footer');
      this.main = $('#main');
      return todoApp.todos.fetch();
    };

    AppView.prototype.render = function() {
      var done, remaining;
      done = todoApp.todos.done().length;
      remaining = todoApp.todos.remaining().length;
      if (todoApp.todos.length) {
        this.main.show();
        this.footer.show();
        this.footer.html(this.statsTemplate({
          done: done,
          remaining: remaining
        }));
      } else {
        this.main.hide();
        this.footer.hide();
      }
      return this.allCheckbox.checked = !remaining;
    };

    AppView.prototype.addOne = function(todo) {
      var view;
      view = new todoApp.Views.TodoView({
        model: todo
      });
      return this.$('#todo-list').append(view.render().el);
    };

    AppView.prototype.addAll = function() {
      return todoApp.todos.each(this.addOne, this);
    };

    AppView.prototype.createOnEnter = function(event) {
      if (event.keyCode !== 13) {
        return;
      }
      if (!this.input.val()) {
        return;
      }
      todoApp.todos.create({
        title: this.input.val()
      });
      return this.input.val('');
    };

    AppView.prototype.clearCompleted = function() {
      _.invoke(todoApp.todos.done(), 'destroy');
      return false;
    };

    AppView.prototype.toggleAllComplete = function() {
      var done;
      done = this.allCheckbox.checked;
      return todoApp.todos.each(function(todo) {
        return todo.save({
          'done': done
        });
      });
    };

    return AppView;

  })(Backbone.View);

  todoApp.todos = new todoApp.Collections.TodoList;

  todoApp.app = new todoApp.Views.AppView;

  window.waitForMsg = function(currentTime) {
    return $.ajax({
      type: "GET",
      url: "/poll/getUpdate/" + currentTime,
      async: true,
      timeout: 5000000000,
      success: function(data) {
        var object, r, t, _i, _len, _ref;
        _ref = data.objects;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          object = _ref[_i];
          if (todoApp.todos.get(object.id)) {
            r = todoApp.todos.get(object.id);
            r.set({
              title: object.title,
              done: object.done,
              order: object.order
            });
          } else {
            t = new todoApp.Models.Todo({
              id: object.id,
              title: object.title,
              done: object.done,
              order: object.order
            });
            todoApp.todos.add(t);
          }
        }
        window.timestamp = data.timestamp;
        return waitForMsg(data.timestamp);
      },
      error: function(error) {
        return waitForMsg(window.timestamp);
      }
    });
  };

  waitForMsg(window.timestamp);

}).call(this);
